<?php
// $Id: $
/**
 * Enables mass assignment of images to galleries.
 *
 * @author Joshua Chan
 */


/**
 * Implementation of hook_menu().
 */
function gallery_manage_menu() {
  $items['admin/content/image/manage'] = array(
    'title' => 'Manage',
    'description' => t('Assign images to galleries via thumbnails'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gallery_manage_form'),
    'access arguments' => array('administer images'),
    'type' => MENU_LOCAL_TASK,
  );
  
  $items['admin/settings/image/add-on'] = array(
    'title' => 'Add-ons',
    'description' => t('Other options'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('image_addon_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
  );
  
  return $items;
}


/**
 * Implementation of hook_theme().
 */
function gallery_manage_theme() {
  return array(
    'gallery_manage_form' => array(
      'arguments' => array('form' => NULL),
      'file' => 'gallery_manage.module',
    ),
  );
}


/**
 * Implementation of hook_form_alter().
 */
function gallery_manage_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'image_node_form') {
    if ($message = variable_get('image_custom_message', '')) {
      $message = _filter_html($message, ''); // strip out harmful HTML tags
      $weight = variable_get('image_custom_message_weight', -4);
      $form[] = array(
        '#type' => 'markup',
        '#value' => $message,
        '#weight' => $weight,
      );
    }
  }
}


/**
 * "Add-ons" tab for Images settings.
 */
function image_addon_settings() {
  $form['gallery_manage'] = array(
    '#type' => 'fieldset',
    '#collapsible' => FALSE,
    '#title' => t('Custom message'),
  );
  $form['gallery_manage']['image_custom_message'] = array(
    '#type' => 'textarea',
    '#title' => t('Message'),
    '#description' => t('You may enter a message to show users before they upload images.'),
    '#default_value' => variable_get('image_custom_message', ''),
  );
  for ($i=-50; $i<=50; $i++) {
    $weight_options[$i] = $i;
  }
  $form['gallery_manage']['image_custom_message_weight'] = array(
    '#type' => 'select',
    '#title' => t('Weight'),
    '#description' => t('This will affect where your message appears on the Create Image page.'),
    '#options' => $weight_options,
    '#default_value' => variable_get('image_custom_message_weight', -4),
  );
  
  return system_settings_form($form);
}


/**
 * Builds a list of form elements for every thumbnail image.
 */
function _gallery_manage_thumbnail_list() {
  global $base_path;

  $tid_filter = _gallery_manage_filter();
  $table = array(
    'nid' => array(),
    'old_tid' => array(),
    'title' => array(),
    'term' => array(),
    'filepath' => array(),
  );
  
  $query = "SELECT n.nid, n.vid, n.title, f.filepath, td.name, tn.tid FROM {node} n INNER JOIN {image} i ON n.nid = i.nid INNER JOIN {files} f ON i.fid = f.fid LEFT JOIN {term_node} tn ON n.nid = tn.nid LEFT JOIN {term_data} td ON tn.tid = td.tid WHERE n.type = 'image' AND f.filename = 'thumbnail'";
  if ($tid_filter == 0) {
    // Include images not assigned to any gallery.
    $query .= " AND (tn.tid = 0 OR tn.tid IS NULL)";
  } elseif ($tid_filter > 0) {
    // Filter results to one specific gallery.
    $query .= " AND tn.tid = ".(int)$tid_filter;
  }
  $query .= " ORDER BY td.tid ASC";
  
  $result = pager_query($query, 20, 0);
  while ($obj = db_fetch_object($result)) {
    $table['nid'][] = array(
      '#type' => 'checkbox',
      '#return_value' => $obj->nid,
      '#checked' => false,
    );
    $table['old_tid'][] = array(
      '#type' => 'value',
      '#value' => (int)$obj->tid,
    );
    $table['vid'][] = array(
      // Note that this 'vid' is for version and not vocabulary
      '#type' => 'value',
      '#value' => (int)$obj->vid,
    );
    $table['title'][] = array(
      '#type' => 'markup',
      '#value' => $obj->title,
    );
    $table['term'][] = array(
      '#type' => 'markup',
      '#value' => $obj->name,
    );
    $table['filepath'][] = array(
      '#type' => 'markup',
      '#value' => l(
        '<img src="'.$base_path.$obj->filepath.'" />', 
        'node/'.$obj->nid, 
        array('html' => true)
      ),
    );
  }
  
  return $table;
}


/**
 * Form definition for the gallery assignment page.
 */
function gallery_manage_form(&$form_state, $edit = array()) {
  $galleries = _image_gallery_parent_select(-1, t('Gallery'));

  $form = array();
  $form['#tree'] = true;
  
  $form['filter'] = array(
    '#type' => 'fieldset',
    '#collapsible' => false,
    '#title' => t('Show only images from'),
  );
  $form['filter']['tid'] = $galleries;
  $form['filter']['tid']['#default_value'] = _gallery_manage_filter();
  $form['filter'][] = array(
    '#type' => 'submit',
    '#value' => t('Filter'),
    '#submit' => array('gallery_manage_form_filter'),
  );
  $form['filter'][] = array(
    '#type' => 'submit',
    '#value' => t('Reset'),
    '#submit' => array('gallery_manage_form_filter'),
  );
  
  $form['options'] = array(
    '#type' => 'fieldset',
    '#collapsible' => false,
    '#title' => t('Assign selected images to'),
  );
  $form['options']['tid'] = $galleries;
  $form['options'][] = array(
    '#type' => 'submit',
    '#value' => t('Update'),
  );
  
  $form['table'] = _gallery_manage_thumbnail_list();
  $form[] = array(
    '#value' => theme('pager', NULL, 20, 0),
  );
  $form['#theme'] = 'gallery_manage_form';
  
  return $form;
}


/**
 * Formats the gallery assignment form by organizing each image's form fields
 * into a table row.
 */
function theme_gallery_manage_form($form) {
  $output = '';
  $output .= drupal_render($form['filter']);
  $output .= drupal_render($form['options']);
  
  if (empty($form['table']['nid'])) {
    $output .= '<div>'.t('There are no gallery images.').'</div>';
  } else {
    $select_header = theme('table_select_header_cell');
    $header = array($select_header, t('Title'), t('Gallery'), t('Thumbnail'));
    $rows = array();
    foreach (element_children($form['table']['title']) as $key) {
      $row = array();
      $row[] = drupal_render($form['table']['nid'][$key]);
      $row[] = drupal_render($form['table']['title'][$key]);
      $row[] = drupal_render($form['table']['term'][$key]);
      $row[] = drupal_render($form['table']['filepath'][$key]);
      $rows[] = $row;
    }
    $output .= theme('table', $header, $rows);
  }
  
  $output .= drupal_render($form);
  return $output;
}


function gallery_manage_form_validate($form, &$form_state) {
  //drupal_set_message('<pre>'.var_export($form_state,1).'</pre>');
  if ($form_state['values']['op'] == t('Update')) {
    $valid = false;
    if (!empty($form_state['values']['table']['nid'])) {
      foreach ($form_state['values']['table']['nid'] as $nid) {
        if ($nid > 0) {
          // Found at least one selected image.
          $valid = true;
          break;
        }
      }
    }
    if (!$valid) {
      form_set_error('', t('You must select at least one image to assign to a gallery.'));
    }
  }
}


/**
 * Handles form submission from the gallery assignment page.
 */
function gallery_manage_form_submit($form, &$form_state) {
  $values = $form_state['values'];
  
  // Find image nodes that already have a taxonomy term attached
  // (These are the images that have been added to a gallery before)
  $nodes_all = $values['table']['nid'];
  $node_list_string = implode(',', $nodes_all);
  $result = db_query("SELECT nid FROM {term_node} WHERE nid IN (%s)", $node_list_string);
  $nodes_with_terms = array();
  while ($obj = db_fetch_object($result)) {
    $nodes_with_terms[$obj->nid] = $obj->nid;
  }


  foreach ($values['table']['nid'] as $key => $val) {
    $nid = $values['table']['nid'][$key];
    $old_tid = $values['table']['old_tid'][$key];
    $vid = $values['table']['vid'][$key];
    $tid = $values['options']['tid'];
    if ($nid) {
      if (in_array($nid, $nodes_with_terms)) {
        // Move image to from one gallery to another
        db_query("UPDATE {term_node} SET tid = %d WHERE nid = %d AND vid = %d AND tid = %d", $tid, $nid, $vid, $old_tid);
      } else {
        // Assign image to a gallery for the first time
        db_query("INSERT INTO {term_node} (nid, vid, tid) VALUES (%d, %d, %d)", $nid, $vid, $tid);
      }
    }
  }
  drupal_set_message(t('Finished assigning images to galleries'));
}


function gallery_manage_form_filter($form, &$form_state) {
  switch ($form_state['values']['op']) {
    case t('Filter'):
      // Set the filter
      _gallery_manage_filter($form_state['values']['filter']['tid']);
      break;

    case t('Reset'):
      $form_state['values']['filter']['tid'] = -1;
      $_SESSION['gallery_manage_filter'] = -1;
      break;
  }
}


/**
 * Sets and/or gets the current gallery filter.
 */
function _gallery_manage_filter($tid = -1) {
  if ($tid > -1) {
    $_SESSION['gallery_manage_filter'] = $tid;
  } elseif (!isset($_SESSION['gallery_manage_filter'])) {
    $_SESSION['gallery_manage_filter'] = -1;
  }
  return $_SESSION['gallery_manage_filter'];
}