package {	import flash.events.Event;	import flash.events.MouseEvent;	import flash.display.Sprite;	import flash.display.MovieClip;	import net.findzen.utils.DebugPanel;	import com.bigspaceship.events.AnimationEvent;	import com.bigspaceship.display.AnimationState;	import com.bigspaceship.utils.Out;	import com.bigspaceship.utils.out.adapters.DebugPanelAdapter;	import com.bigspaceship.utils.out.adapters.IOutAdapter;		public class Main extends MovieClip {		public var globeContainer:SnowGlobeContainer;		public var shadow:MovieClip;		public function Main() {			super();			// initial stage settings			stage.scaleMode = "noScale";			stage.align = "left";			addEventListener(Event.ADDED_TO_STAGE, _onAddedToStage, false, 0, true);						// listen for COMPLETE event from globeContainer			main_mc.globeContainer.addEventListener(AnimationEvent.IN, _onGlobeAnimIn, false, 0, true);						// main buttons			main_mc.shake_btn.addEventListener(MouseEvent.CLICK, _onShakeBtnClick, false, 0, true);			main_mc.share_btn.addEventListener(MouseEvent.CLICK, _onShareBtnClick, false, 0, true);						// form buttons			main_mc.form.preview_btn.addEventListener(MouseEvent.CLICK, _onPreviewBtnClick, false, 0, true);			main_mc.form.send_btn.addEventListener(MouseEvent.CLICK, _onSendBtnClick, false, 0, true);									// debug panel			DebugPanel.stage = stage;						var adapter:IOutAdapter = new DebugPanelAdapter();			Out.registerDebugger(adapter);			Out.enableAllLevels();								}								private function _onAddedToStage($e:Event):void {			removeEventListener(Event.ADDED_TO_STAGE, _onAddedToStage);						// get url params			try {								var flashVars = stage.loaderInfo.parameters;							} catch (error:Error) {								Out.error(this, error);							}						Out.info(this, 'flashVars', flashVars.toString());			for(var i in flashVars) Out.status(this, 'flashVars ::', flashVars);						if(flashVars["msg"]) {								Out.info(this, "flashVars msg:", flashVars["msg"]);				shake(unescape(flashVars["msg"]));							} else {								Out.warning(this, "No flashVars found");				shake();							}		}				private function _onGlobeAnimIn($e:AnimationEvent):void {			main_mc.gotoAndPlay(AnimationState.IN);		}						// main buttons		private function _onShakeBtnClick($e:MouseEvent):void {			shake();		}				private function _onShareBtnClick($e:MouseEvent):void {			main_mc.gotoAndPlay('SHOW_FORM');			main_mc.globeContainer.gotoAndPlay(AnimationState.IDLE);		}				// form buttons		private function _onPreviewBtnClick($e:MouseEvent):void {			shake(main_mc.form.message);		}				private function _onSendBtnClick($e:MouseEvent):void {			if(main_mc.form.submit()) main_mc.gotoAndPlay('HIDE_FORM');		}								public function shake($msg:String = void):void {						if($msg) main_mc.globeContainer.message_mc.message_txt.text = $msg;						main_mc.globeContainer.gotoAndPlay(AnimationState.IN_START);			main_mc.gotoAndPlay(AnimationState.IN_START);						main_mc.globeContainer.shake();					}	}}